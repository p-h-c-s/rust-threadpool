<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>libsystem_pthread.dylib`pthread_cond_signal (11 samples, 0.10%)</title><rect x="867.9" y="101" width="1.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="870.93" y="111.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`DYLD-STUB$$pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="1078.7" y="85" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1081.68" y="95.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (1 samples, 0.01%)</title><rect x="1184.3" y="37" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1187.26" y="47.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sys_common::backtrace::__rust_begin_short_backtrace::h55d70873c3c11606 (8,181 samples, 72.33%)</title><rect x="14.0" y="197" width="853.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="16.96" y="207.5" >thread_pool-824394ceab69d34e`std::sys_common::backtrace::__rust_begin_short_backtrace::h55d70873c3c11606</text>
</g>
<g >
<title>all (11,310 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`core::ops::function::FnOnce::call_once::h49f2fefc8b33d4ec (3,091 samples, 27.33%)</title><rect x="867.5" y="149" width="322.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="870.51" y="159.5" >thread_pool-824394ceab69d34e`core::ops::fun..</text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.37%)</title><rect x="1070.5" y="85" width="4.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1073.54" y="95.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_unlock (28 samples, 0.25%)</title><rect x="1099.4" y="69" width="3.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1102.44" y="79.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::thread::scoped::scope::hd4401d86e3cdd404 (3,091 samples, 27.33%)</title><rect x="867.5" y="133" width="322.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="870.51" y="143.5" >thread_pool-824394ceab69d34e`std::thread::s..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (969 samples, 8.57%)</title><rect x="763.6" y="149" width="101.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="766.59" y="159.5" >libsystem_pt..</text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_cvwait (5,274 samples, 46.63%)</title><rect x="185.9" y="165" width="550.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="188.90" y="175.5" >libsystem_kernel.dylib`__psynch_cvwait</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`DYLD-STUB$$pthread_mutex_lock (3 samples, 0.03%)</title><rect x="11.7" y="197" width="0.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="14.67" y="207.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="867.4" y="165" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="870.40" y="175.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_mutexwait (768 samples, 6.79%)</title><rect x="1104.1" y="37" width="80.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1107.13" y="47.5" >libsystem..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sync::condvar::Condvar::wait_while::h683fddd57278a3b3 (6,578 samples, 58.16%)</title><rect x="181.2" y="181" width="686.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="184.21" y="191.5" >thread_pool-824394ceab69d34e`std::sync::condvar::Condvar::wait_while::h683fddd57278a3b3</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sync::condvar::Condvar::notify_one::hfe75b8a338168262 (2 samples, 0.02%)</title><rect x="869.2" y="101" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="872.18" y="111.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`thread_pool::sync_collection::synchronized_queue::SynchronizedQueue$LT$T$GT$::lock_unwrap::h8bc7a349e538c47a (1 samples, 0.01%)</title><rect x="1079.2" y="85" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1082.20" y="95.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_cond_signal (32 samples, 0.28%)</title><rect x="1075.3" y="85" width="3.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1078.34" y="95.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sync::condvar::Condvar::wait_while::h683fddd57278a3b3 (11 samples, 0.10%)</title><rect x="12.8" y="197" width="1.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="15.82" y="207.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_cond_updateval (4 samples, 0.04%)</title><rect x="1074.9" y="85" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1077.92" y="95.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_start (11,310 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >libsystem_pthread.dylib`_pthread_start</text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (16 samples, 0.14%)</title><rect x="10.0" y="197" width="1.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_droplock (1 samples, 0.01%)</title><rect x="867.3" y="165" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="870.30" y="175.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`test::run_test::_$u7b$$u7b$closure$u7d$$u7d$::h76b410377c0b2f35 (3,091 samples, 27.33%)</title><rect x="867.5" y="181" width="322.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="870.51" y="191.5" >thread_pool-824394ceab69d34e`test::run_test..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h9e4b8cf5c05495ef (3,091 samples, 27.33%)</title><rect x="867.5" y="213" width="322.5" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="870.51" y="223.5" >thread_pool-824394ceab69d34e`core::ops::fun..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sys::pal::unix::thread::Thread::new::thread_start::h50a0ef5291b272f3 (11,310 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >thread_pool-824394ceab69d34e`std::sys::pal::unix::thread::Thread::new::thread_start::h50a0ef5291b272f3</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sys::pal::unix::thread::Thread::new::h531e04b01f34646c (1 samples, 0.01%)</title><rect x="1079.1" y="69" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1082.09" y="79.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (429 samples, 3.79%)</title><rect x="19.4" y="181" width="44.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="22.39" y="191.5" >libs..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::sys_common::backtrace::__rust_begin_short_backtrace::hc1611c1e78c48a9e (3,091 samples, 27.33%)</title><rect x="867.5" y="197" width="322.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="870.51" y="207.5" >thread_pool-824394ceab69d34e`std::sys_commo..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (4 samples, 0.04%)</title><rect x="63.7" y="165" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="66.73" y="175.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`DYLD-STUB$$pthread_mutex_unlock (7 samples, 0.06%)</title><rect x="12.0" y="197" width="0.7" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="14.98" y="207.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_mutexwait (422 samples, 3.73%)</title><rect x="19.7" y="165" width="44.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="22.70" y="175.5" >libs..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`test::__rust_begin_short_backtrace::h17f7c1515df0a235 (3,091 samples, 27.33%)</title><rect x="867.5" y="165" width="322.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="870.51" y="175.5" >thread_pool-824394ceab69d34e`test::__rust_b..</text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_unlock (94 samples, 0.83%)</title><rect x="171.2" y="181" width="9.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="174.19" y="191.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (50 samples, 0.44%)</title><rect x="1184.4" y="53" width="5.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1187.37" y="63.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_cond_wait (2 samples, 0.02%)</title><rect x="19.2" y="181" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="22.18" y="191.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (46 samples, 0.41%)</title><rect x="166.4" y="181" width="4.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="169.39" y="191.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`DYLD-STUB$$pthread_cond_signal (1 samples, 0.01%)</title><rect x="869.1" y="101" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="872.07" y="111.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`thread_start (11,310 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >libsystem_pthread.dylib`thread_start</text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (17 samples, 0.15%)</title><rect x="864.7" y="149" width="1.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="867.69" y="159.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`thread_pool::sync_collection::thread_pool::ThreadPool::submit::h477319fc44c83500 (3,061 samples, 27.06%)</title><rect x="870.2" y="101" width="319.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="873.22" y="111.5" >thread_pool-824394ceab69d34e`thread_pool::s..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (773 samples, 6.83%)</title><rect x="1103.7" y="53" width="80.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1106.72" y="63.5" >libsystem..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`thread_pool::sync_collection::thread_pool::ThreadPool::submit::h477319fc44c83500 (4 samples, 0.04%)</title><rect x="1189.6" y="117" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1192.58" y="127.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_cond_wait (1,257 samples, 11.11%)</title><rect x="736.2" y="165" width="131.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="739.15" y="175.5" >libsystem_pthrea..</text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_mutexwait (942 samples, 8.33%)</title><rect x="765.5" y="133" width="98.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="768.47" y="143.5" >libsystem_k..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::thread::scoped::_$LT$impl$u20$std..thread..Builder$GT$::spawn_scoped::h574b4c9a3a1756b2 (1 samples, 0.01%)</title><rect x="1079.1" y="85" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1082.09" y="95.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_droplock (241 samples, 2.13%)</title><rect x="738.4" y="149" width="25.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="741.45" y="159.5" >l..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`std::panicking::try::h96a1de6386da36d7 (3,087 samples, 27.29%)</title><rect x="867.5" y="117" width="322.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="870.51" y="127.5" >thread_pool-824394ceab69d34e`std::panicking..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_wake (1 samples, 0.01%)</title><rect x="166.2" y="165" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="169.19" y="175.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_mutexdrop (173 samples, 1.53%)</title><rect x="1081.4" y="53" width="18.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1084.39" y="63.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`thread_pool::sync_collection::synchronized_queue::SynchronizedQueue$LT$T$GT$::push::h88531f8709801523 (8 samples, 0.07%)</title><rect x="869.4" y="101" width="0.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="872.39" y="111.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (174 samples, 1.54%)</title><rect x="1081.3" y="69" width="18.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1084.29" y="79.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_mutexdrop (975 samples, 8.62%)</title><rect x="64.3" y="165" width="101.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="67.25" y="175.5" >libsystem_ke..</text>
</g>
<g >
<title>libsystem_kernel.dylib`__psynch_cvsignal (1,913 samples, 16.91%)</title><rect x="871.0" y="85" width="199.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="873.95" y="95.5" >libsystem_kernel.dylib`__p..</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h72ee593c47a24eef (1 samples, 0.01%)</title><rect x="12.7" y="197" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="15.71" y="207.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (9 samples, 0.08%)</title><rect x="863.8" y="133" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="866.75" y="143.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (979 samples, 8.66%)</title><rect x="64.1" y="181" width="102.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="67.15" y="191.5" >libsystem_pt..</text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_testcancel (8 samples, 0.07%)</title><rect x="866.5" y="149" width="0.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="869.47" y="159.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`DYLD-STUB$$pthread_cond_wait (2 samples, 0.02%)</title><rect x="181.0" y="181" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="184.00" y="191.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`thread_pool::sync_collection::synchronized_queue::SynchronizedQueue$LT$T$GT$::lock_unwrap::h8bc7a349e538c47a (830 samples, 7.34%)</title><rect x="1103.0" y="69" width="86.6" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1105.99" y="79.5" >thread_poo..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_wake (1 samples, 0.01%)</title><rect x="166.3" y="181" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="169.29" y="191.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h37fd601507f7d609 (8,219 samples, 72.67%)</title><rect x="10.0" y="213" width="857.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >thread_pool-824394ceab69d34e`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h37fd601507f7d609</text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`thread_pool::sync_collection::synchronized_queue::SynchronizedQueue$LT$T$GT$::push::h88531f8709801523 (1,057 samples, 9.35%)</title><rect x="1079.3" y="85" width="110.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1082.30" y="95.5" >thread_pool-8..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_create (1 samples, 0.01%)</title><rect x="1079.1" y="53" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1082.09" y="63.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_mutexdrop (2 samples, 0.02%)</title><rect x="166.0" y="165" width="0.2" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="168.98" y="175.5" ></text>
</g>
<g >
<title>thread_pool-824394ceab69d34e`DYLD-STUB$$pthread_mutex_lock (6 samples, 0.05%)</title><rect x="1102.4" y="69" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1105.36" y="79.5" ></text>
</g>
</g>
</svg>
